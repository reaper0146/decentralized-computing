# coding: utf-8

"""
    Yagna Activity API

     The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).   # noqa: E501

    The version of the OpenAPI document: 1.6.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

from ya_activity.configuration import Configuration


class RuntimeEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_id': 'str',
        'index': 'int',
        'timestamp': 'str',
        'kind': 'object'
    }

    attribute_map = {
        'batch_id': 'batchId',
        'index': 'index',
        'timestamp': 'timestamp',
        'kind': 'kind'
    }

    def __init__(self, batch_id=None, index=None, timestamp=None, kind=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batch_id = None
        self._index = None
        self._timestamp = None
        self._kind = None
        self.discriminator = None

        self.batch_id = batch_id
        self.index = index
        self.timestamp = timestamp
        self.kind = kind

    @property
    def batch_id(self):
        """Gets the batch_id of this RuntimeEvent.  # noqa: E501


        :return: The batch_id of this RuntimeEvent.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this RuntimeEvent.


        :param batch_id: The batch_id of this RuntimeEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and batch_id is None:  # noqa: E501
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def index(self):
        """Gets the index of this RuntimeEvent.  # noqa: E501


        :return: The index of this RuntimeEvent.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this RuntimeEvent.


        :param index: The index of this RuntimeEvent.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and index is None:  # noqa: E501
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def timestamp(self):
        """Gets the timestamp of this RuntimeEvent.  # noqa: E501


        :return: The timestamp of this RuntimeEvent.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RuntimeEvent.


        :param timestamp: The timestamp of this RuntimeEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def kind(self):
        """Gets the kind of this RuntimeEvent.  # noqa: E501


        :return: The kind of this RuntimeEvent.  # noqa: E501
        :rtype: object
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RuntimeEvent.


        :param kind: The kind of this RuntimeEvent.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and kind is None:  # noqa: E501
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.openapi_types:
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeEvent):
            return True

        return self.to_dict() != other.to_dict()
