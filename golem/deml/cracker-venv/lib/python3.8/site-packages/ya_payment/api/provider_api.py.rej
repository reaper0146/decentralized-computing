***************
*** 59,66 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.cancel_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
  
      def cancel_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Cancel Debit Note.  # noqa: E501
--- 54,63 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.cancel_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
  
      def cancel_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Cancel Debit Note.  # noqa: E501
***************
*** 90,132 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `cancel_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `cancel_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 87,138 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `cancel_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `cancel_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 135,148 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/cancel', 'POST',
              path_params,
              query_params,
              header_params,
--- 141,156 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/cancel",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 211,253 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `cancel_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `cancel_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 222,273 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method cancel_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `cancel_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `cancel_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 256,269 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/cancel', 'POST',
              path_params,
              query_params,
              header_params,
--- 276,291 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/cancel",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 299,306 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_incoming_payment_with_http_info(payment_id, **kwargs)  # noqa: E501
  
      def get_incoming_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
--- 324,333 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_incoming_payment_with_http_info(
!             payment_id, **kwargs
!         )  # noqa: E501
  
      def get_incoming_payment_with_http_info(self, payment_id, **kwargs):  # noqa: E501
          """Get incoming Payment.  # noqa: E501
***************
*** 328,363 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'payment_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and ('payment_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['payment_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `payment_id` when calling `get_incoming_payment`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'payment_id' in local_var_params:
!             path_params['paymentId'] = local_var_params['payment_id']  # noqa: E501
  
          query_params = []
  
--- 355,392 ----
  
          local_var_params = locals()
  
!         all_params = ["payment_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payment" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'payment_id' is set
!         if self.api_client.client_side_validation and (
!             "payment_id" not in local_var_params
!             or local_var_params["payment_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `payment_id` when calling `get_incoming_payment`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "payment_id" in local_var_params:
!             path_params["paymentId"] = local_var_params["payment_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 368,394 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/payments/{paymentId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Allocation',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_incoming_payments(self, **kwargs):  # noqa: E501
          """Get incoming Payments.  # noqa: E501
--- 397,428 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/payments/{paymentId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Allocation",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_incoming_payments(self, **kwargs):  # noqa: E501
          """Get incoming Payments.  # noqa: E501
***************
*** 413,419 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_incoming_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_incoming_payments_with_http_info(self, **kwargs):  # noqa: E501
--- 447,453 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_incoming_payments_with_http_info(**kwargs)  # noqa: E501
  
      def get_incoming_payments_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 444,482 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_incoming_payments`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 478,526 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_incoming_payments" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_incoming_payments`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 485,511 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
--- 529,560 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
***************
*** 528,537 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_issued_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_issued_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 577,590 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_issued_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_issued_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 557,592 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_issued_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 610,647 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_issued_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 597,623 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='DebitNote',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes issued by this Provider.  # noqa: E501
--- 652,683 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="DebitNote",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_debit_notes(self, **kwargs):  # noqa: E501
          """Get Debit Notes issued by this Provider.  # noqa: E501
***************
*** 639,645 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_issued_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
--- 699,705 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_issued_debit_notes_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_debit_notes_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 667,691 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 727,750 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_debit_notes" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 700,726 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[DebitNote]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 759,790 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[DebitNote]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 743,750 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_issued_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
  
      def get_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
--- 807,816 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_issued_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
  
      def get_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Invoice.  # noqa: E501
***************
*** 772,807 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_issued_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 838,875 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_issued_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 812,838 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Invoice',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_issued_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices issued by this Provider.  # noqa: E501
--- 880,911 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Invoice",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_issued_invoices(self, **kwargs):  # noqa: E501
          """Get Invoices issued by this Provider.  # noqa: E501
***************
*** 854,860 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_issued_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_invoices_with_http_info(self, **kwargs):  # noqa: E501
--- 927,933 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_issued_invoices_with_http_info(**kwargs)  # noqa: E501
  
      def get_issued_invoices_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 882,906 ****
  
          local_var_params = locals()
  
!         all_params = [
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
          collection_formats = {}
  
--- 955,978 ----
  
          local_var_params = locals()
  
!         all_params = []
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_issued_invoices" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
          collection_formats = {}
  
***************
*** 915,941 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Invoice]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_payments_for_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
--- 987,1018 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Invoice]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_payments_for_issued_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
***************
*** 958,967 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_issued_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_issued_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1035,1048 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_issued_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_issued_debit_note_with_http_info(
!         self, debit_node_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for Debit Note.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 987,1022 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `get_payments_for_issued_debit_note`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
  
--- 1068,1105 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `get_payments_for_issued_debit_note`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1027,1053 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_payments_for_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
--- 1110,1141 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_payments_for_issued_invoice(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
***************
*** 1070,1079 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_payments_for_issued_invoice_with_http_info(invoice_id, **kwargs)  # noqa: E501
! 
!     def get_payments_for_issued_invoice_with_http_info(self, invoice_id, **kwargs):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
--- 1158,1171 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_payments_for_issued_invoice_with_http_info(
!             invoice_id, **kwargs
!         )  # noqa: E501
! 
!     def get_payments_for_issued_invoice_with_http_info(
!         self, invoice_id, **kwargs
!     ):  # noqa: E501
          """Get Payments for issued Invoice.  # noqa: E501
  
          This method makes a synchronous HTTP request by default. To make an
***************
*** 1099,1134 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `get_payments_for_issued_invoice`")  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
  
--- 1191,1228 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_payments_for_issued_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `get_payments_for_issued_invoice`"
!             )  # noqa: E501
  
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
  
***************
*** 1139,1165 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/payments', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[Payment]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_provider_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1233,1264 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/payments",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[Payment]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_provider_debit_note_events(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1184,1191 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.get_provider_debit_note_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
--- 1283,1292 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.get_provider_debit_note_events_with_http_info(
!             **kwargs
!         )  # noqa: E501
  
      def get_provider_debit_note_events_with_http_info(self, **kwargs):  # noqa: E501
          """Get Debit Note events.  # noqa: E501
***************
*** 1215,1253 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_provider_debit_note_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1316,1364 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_debit_note_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_provider_debit_note_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1256,1282 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNoteEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[InvoiceEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def get_provider_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
--- 1367,1398 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNoteEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[InvoiceEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def get_provider_invoice_events(self, **kwargs):  # noqa: E501
          """Get Invoice events.  # noqa: E501
***************
*** 1301,1307 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
          return self.get_provider_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
--- 1417,1423 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
          return self.get_provider_invoice_events_with_http_info(**kwargs)  # noqa: E501
  
      def get_provider_invoice_events_with_http_info(self, **kwargs):  # noqa: E501
***************
*** 1332,1370 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'timeout',
!             'later_than'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
  
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `get_provider_invoice_events`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
!         if 'later_than' in local_var_params and local_var_params['later_than'] is not None:  # noqa: E501
!             query_params.append(('laterThan', local_var_params['later_than']))  # noqa: E501
  
          header_params = {}
  
--- 1448,1496 ----
  
          local_var_params = locals()
  
!         all_params = ["timeout", "later_than"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method get_provider_invoice_events" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
  
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `get_provider_invoice_events`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
!         if (
!             "later_than" in local_var_params
!             and local_var_params["later_than"] is not None
!         ):  # noqa: E501
!             query_params.append(
!                 ("laterThan", local_var_params["later_than"])
!             )  # noqa: E501
  
          header_params = {}
  
***************
*** 1373,1399 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoiceEvents', 'GET',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='list[InvoiceEvent]',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def issue_debit_note(self, debit_note, **kwargs):  # noqa: E501
          """Issue a Debit Note.  # noqa: E501
--- 1499,1530 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoiceEvents",
!             "GET",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="list[InvoiceEvent]",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def issue_debit_note(self, debit_note, **kwargs):  # noqa: E501
          """Issue a Debit Note.  # noqa: E501
***************
*** 1683,1716 ****
          local_var_files = {}
  
          body_params = None
!         if 'debit_note' in local_var_params:
!             body_params = local_var_params['debit_note']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='DebitNote',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def issue_invoice(self, invoice, **kwargs):  # noqa: E501
          """Issue an Invoice.  # noqa: E501
--- 1816,1857 ----
          local_var_files = {}
  
          body_params = None
!         if "debit_note" in local_var_params:
!             body_params = local_var_params["debit_note"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="DebitNote",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def issue_invoice(self, invoice, **kwargs):  # noqa: E501
          """Issue an Invoice.  # noqa: E501
***************
*** 1799,1832 ****
          local_var_files = {}
  
          body_params = None
!         if 'invoice' in local_var_params:
!             body_params = local_var_params['invoice']
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices', 'POST',
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type='Invoice',  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get('async_req'),
!             _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
!             _preload_content=local_var_params.get('_preload_content', True),
!             _request_timeout=local_var_params.get('_request_timeout'),
!             collection_formats=collection_formats)
  
      def send_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
--- 1942,1983 ----
          local_var_files = {}
  
          body_params = None
!         if "invoice" in local_var_params:
!             body_params = local_var_params["invoice"]
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # HTTP header `Content-Type`
!         header_params[
!             "Content-Type"
!         ] = self.api_client.select_header_content_type(  # noqa: E501
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices",
!             "POST",
              path_params,
              query_params,
              header_params,
              body=body_params,
              post_params=form_params,
              files=local_var_files,
!             response_type="Invoice",  # noqa: E501
              auth_settings=auth_settings,
!             async_req=local_var_params.get("async_req"),
!             _return_http_data_only=local_var_params.get(
!                 "_return_http_data_only"
!             ),  # noqa: E501
!             _preload_content=local_var_params.get("_preload_content", True),
!             _request_timeout=local_var_params.get("_request_timeout"),
!             collection_formats=collection_formats,
!         )
  
      def send_debit_note(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
***************
*** 1851,1858 ****
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs['_return_http_data_only'] = True
!         return self.send_debit_note_with_http_info(debit_node_id, **kwargs)  # noqa: E501
  
      def send_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
--- 2002,2011 ----
                   If the method is called asynchronously,
                   returns the request thread.
          """
!         kwargs["_return_http_data_only"] = True
!         return self.send_debit_note_with_http_info(
!             debit_node_id, **kwargs
!         )  # noqa: E501
  
      def send_debit_note_with_http_info(self, debit_node_id, **kwargs):  # noqa: E501
          """Send Debit Note to Requestor.  # noqa: E501
***************
*** 1882,1924 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'debit_node_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and ('debit_node_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['debit_node_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `debit_node_id` when calling `send_debit_note`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `send_debit_note`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'debit_node_id' in local_var_params:
!             path_params['debitNodeId'] = local_var_params['debit_node_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 2035,2086 ----
  
          local_var_params = locals()
  
!         all_params = ["debit_node_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_debit_note" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'debit_node_id' is set
!         if self.api_client.client_side_validation and (
!             "debit_node_id" not in local_var_params
!             or local_var_params["debit_node_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `debit_node_id` when calling `send_debit_note`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `send_debit_note`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "debit_node_id" in local_var_params:
!             path_params["debitNodeId"] = local_var_params["debit_node_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 1927,1940 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/debitNotes/{debitNodeId}/send', 'POST',
              path_params,
              query_params,
              header_params,
--- 2089,2104 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/debitNotes/{debitNodeId}/send",
!             "POST",
              path_params,
              query_params,
              header_params,
***************
*** 2003,2045 ****
  
          local_var_params = locals()
  
!         all_params = [
!             'invoice_id',
!             'timeout'
!         ]
          all_params.extend(
              [
!                 'async_req',
!                 '_return_http_data_only',
!                 '_preload_content',
!                 '_request_timeout'
              ]
          )
  
!         for key, val in six.iteritems(local_var_params['kwargs']):
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params['kwargs']
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and ('invoice_id' not in local_var_params or  # noqa: E501
!                                                         local_var_params['invoice_id'] is None):  # noqa: E501
!             raise ApiValueError("Missing the required parameter `invoice_id` when calling `send_invoice`")  # noqa: E501
! 
!         if self.api_client.client_side_validation and 'timeout' in local_var_params and local_var_params['timeout'] < 0:  # noqa: E501
!             raise ApiValueError("Invalid value for parameter `timeout` when calling `send_invoice`, must be a value greater than or equal to `0`")  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if 'invoice_id' in local_var_params:
!             path_params['invoiceId'] = local_var_params['invoice_id']  # noqa: E501
  
          query_params = []
!         if 'timeout' in local_var_params and local_var_params['timeout'] is not None:  # noqa: E501
!             query_params.append(('timeout', local_var_params['timeout']))  # noqa: E501
  
          header_params = {}
  
--- 2170,2221 ----
  
          local_var_params = locals()
  
!         all_params = ["invoice_id", "timeout"]
          all_params.extend(
              [
!                 "async_req",
!                 "_return_http_data_only",
!                 "_preload_content",
!                 "_request_timeout",
              ]
          )
  
!         for key, val in local_var_params["kwargs"].items():
              if key not in all_params:
                  raise ApiTypeError(
                      "Got an unexpected keyword argument '%s'"
                      " to method send_invoice" % key
                  )
              local_var_params[key] = val
!         del local_var_params["kwargs"]
          # verify the required parameter 'invoice_id' is set
!         if self.api_client.client_side_validation and (
!             "invoice_id" not in local_var_params
!             or local_var_params["invoice_id"] is None  # noqa: E501
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Missing the required parameter `invoice_id` when calling `send_invoice`"
!             )  # noqa: E501
! 
!         if (
!             self.api_client.client_side_validation
!             and "timeout" in local_var_params
!             and local_var_params["timeout"] < 0
!         ):  # noqa: E501
!             raise ApiValueError(
!                 "Invalid value for parameter `timeout` when calling `send_invoice`, must be a value greater than or equal to `0`"
!             )  # noqa: E501
          collection_formats = {}
  
          path_params = {}
!         if "invoice_id" in local_var_params:
!             path_params["invoiceId"] = local_var_params["invoice_id"]  # noqa: E501
  
          query_params = []
!         if (
!             "timeout" in local_var_params and local_var_params["timeout"] is not None
!         ):  # noqa: E501
!             query_params.append(("timeout", local_var_params["timeout"]))  # noqa: E501
  
          header_params = {}
  
***************
*** 2048,2061 ****
  
          body_params = None
          # HTTP header `Accept`
!         header_params['Accept'] = self.api_client.select_header_accept(
!             ['application/json'])  # noqa: E501
  
          # Authentication setting
!         auth_settings = ['app_key']  # noqa: E501
  
          return self.api_client.call_api(
!             '/provider/invoices/{invoiceId}/send', 'POST',
              path_params,
              query_params,
              header_params,
--- 2224,2239 ----
  
          body_params = None
          # HTTP header `Accept`
!         header_params["Accept"] = self.api_client.select_header_accept(
!             ["application/json"]
!         )  # noqa: E501
  
          # Authentication setting
!         auth_settings = ["app_key"]  # noqa: E501
  
          return self.api_client.call_api(
!             "/provider/invoices/{invoiceId}/send",
!             "POST",
              path_params,
              query_params,
              header_params,
