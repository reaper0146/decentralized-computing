"use strict";

const Debug = require('debug');

const iexecProxyNetworks = require('@iexec/poco/build/contracts-min/ERC1538Proxy.json').networks;

const enterpriseHubMap = {
  1: '0x0bf375A6238359CE14987C2285B8B099eE8e8709',
  5: '0x0bf375A6238359CE14987C2285B8B099eE8e8709'
};
const debug = Debug('iexec:utils');

const getHubAddress = (chainId, flavour, {
  strict = true
} = {}) => {
  try {
    if (flavour === 'enterprise') {
      if (!enterpriseHubMap[chainId]) {
        if (strict) {
          throw Error('missing iExec proxy configuration');
        }

        return undefined;
      }

      return enterpriseHubMap[chainId];
    }

    if (!iexecProxyNetworks) {
      if (strict) {
        throw Error('missing iExec proxy configuration');
      }

      return undefined;
    }

    if (!(chainId in iexecProxyNetworks)) {
      if (strict) {
        throw Error(`missing chainId "${chainId}" in iExec proxy configuration`);
      }

      return undefined;
    }

    if (!('address' in iexecProxyNetworks[chainId])) {
      if (strict) {
        throw Error(`missing address in iExec proxy configuration for chainId "${chainId}"`);
      }

      return undefined;
    }

    return iexecProxyNetworks[chainId].address;
  } catch (error) {
    debug('getHubAddress()', error);
    throw error;
  }
};

const getContractAddress = (objName, desc, chainId, flavour, {
  strict = true
} = {}) => {
  try {
    if (objName === 'hub') return getHubAddress(chainId, flavour, {
      strict
    });

    if (flavour === 'enterprise') {
      if (strict) {
        throw Error('missing enterprise configuration');
      }

      return undefined;
    }

    if (!('networks' in desc)) {
      if (strict) {
        throw Error('missing networks key in contract JSON description');
      }

      return undefined;
    }

    if (!(chainId in desc.networks)) {
      if (strict) {
        throw Error(`missing "${chainId}" key in contract JSON description`);
      }

      return undefined;
    }

    if (!('address' in desc.networks[chainId])) {
      if (strict) {
        throw Error(`missing address key in contract JSON description for chainId: ${chainId}`);
      }

      return undefined;
    }

    return desc.networks[chainId].address;
  } catch (error) {
    debug('getContractAddress()', error);
    throw error;
  }
};

const toUpperFirst = str => ''.concat(str[0].toUpperCase(), str.substr(1));

const nativeNetworks = {
  standard: ['133', '134'],
  enterprise: []
};
const gasPriceByNetwork = {
  133: '0x0',
  134: '0x0'
};

const getIsNative = (chainId, flavour) => nativeNetworks[flavour].includes(chainId);

const getGasPriceOverride = chainId => gasPriceByNetwork[chainId];

module.exports = {
  getContractAddress,
  getIsNative,
  getGasPriceOverride,
  toUpperFirst
};