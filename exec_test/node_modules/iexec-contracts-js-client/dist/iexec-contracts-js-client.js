"use strict";

const createHub = require('./hub');

const {
  getIsNative,
  getGasPriceOverride
} = require('./utils');

class IExecContractsClient {
  constructor({
    provider,
    signer,
    chainId,
    hubAddress,
    useGas = true,
    confirms = 1,
    isNative,
    flavour = 'standard'
  } = {}) {
    if (!provider) throw Error('missing provider key');
    const stringChainId = `${chainId}`;
    if (!stringChainId) throw Error('missing chainId key');
    if (!Number.isInteger(confirms) || confirms <= 0) throw Error('invalid confirms');
    if (flavour !== 'standard' && flavour !== 'enterprise') throw Error('invalid flavour');
    this._args = {
      provider,
      signer,
      chainId: stringChainId,
      hubAddress,
      useGas,
      confirms,
      isNative,
      flavour
    };
    const native = isNative !== undefined ? !!isNative : getIsNative(stringChainId, flavour);
    const gasPriceOverride = useGas === false ? '0x0' : getGasPriceOverride(stringChainId);
    const hubContract = createHub({
      ethSigner: signer,
      ethProvider: provider,
      chainId: stringChainId,
      globalHubAddress: hubAddress,
      isNative: native,
      flavour,
      gasPrice: gasPriceOverride,
      confirms
    });

    this.setSigner = function setSigner(ethSigner) {
      const connectedSigner = ethSigner.connect(this.provider);
      Object.assign(this, new IExecContractsClient({ ...this._args,
        signer: connectedSigner
      }));
    };

    Object.assign(this, {
      provider,
      signer,
      chainId: stringChainId,
      txOptions: {
        gasPrice: gasPriceOverride
      },
      confirms,
      ...hubContract
    });
  }

}

module.exports = IExecContractsClient;